name: main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  push:
  pull_request:

jobs:
  build:
    if: ${{ github.event_name != 'push' || github.ref != 'refs/heads/updates'}}
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: UCRT64, repo: ucrt, runner: windows-2022 },
          { msystem: CLANG64, repo: clang, runner: windows-2022 }
        ]
    name: ${{ matrix.msystem }}
    runs-on: ${{ matrix.runner }}
    env:
      MSYS: "winjitdebug"
      mingw_repo_sf: https://sourceforge.net/projects/mingw-updates/files/${{ matrix.repo }}
    steps:
      - name: Get CPU Name
        run : |
          Get-CIMInstance -Class Win32_Processor | Select-Object -Property Name

      - name: Setup JIT minidump
        if: ${{ matrix.msystem != 'CLANGARM64' }}
        run: |
          Set-Location '${{ runner.temp }}'
          Invoke-WebRequest -Uri 'https://download.sysinternals.com/files/Procdump.zip' -OutFile Procdump.zip
          Expand-Archive Procdump.zip -DestinationPath .
          New-Item -Path '_dumps' -ItemType Directory
          .\procdump64.exe -accepteula -ma -i "${{ runner.temp }}/_dumps"
          .\procdump.exe -accepteula -ma -i "${{ runner.temp }}/_dumps"

      - name: Configure Pagefile
        if: ${{ matrix.msystem != 'CLANGARM64' }}
        uses: al-cheb/configure-pagefile-action@86589fd789a4de3e62ba628dda2cb10027b66d67
        with:
          minimum-size: 4GB
          maximum-size: 16GB
          disk-root: "C:"

      - uses: actions/checkout@v3
        with:
          path: temp
          fetch-depth: 0
          persist-credentials: false

      # to match the autobuild environment
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'

      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ contains(matrix.msystem, 'ARM64') && 'MSYS' || matrix.msystem }}
          install: git python base-devel pactoys
          update: true
          release: false

      - name: Add staging and ${{ matrix.repo }} repos
        shell: msys2 {0}
        run: |
          grep -qFx '[staging]' /etc/pacman.conf || sed -i '/^# \[staging\]/,/^$/ s|^# ||g' /etc/pacman.conf
          sed -i '1s|^|[${{ matrix.repo }}]\nServer = ${{ env.mingw_repo_sf }}\nSigLevel = Never\n|' /etc/pacman.conf

      - name: Update using staging and ${{ matrix.repo }} repos
        run: |
          msys2 -c 'pacman --noconfirm -Suuy'
          msys2 -c 'pacman --noconfirm -Suu'

      - name: Move Checkout
        run: |
          If (Test-Path "C:\_") { rm -r -fo "C:\_" }
          Copy-Item -Path ".\temp" -Destination "C:\_" -Recurse

      - name: CI-Build
        shell: msys2 {0}
        continue-on-error: true
        timeout-minutes: 345
        run: |
          cd /C/_
          sed -i 's|#PACKAGER="John Doe <john@doe.com>"|PACKAGER="Mehdi Chinoune <mehdi.chinoune@hotmail.com>"\n|g' /etc/makepkg_mingw.conf
          unset VCPKG_ROOT
          pacman -S --needed --noconfirm ${MINGW_PACKAGE_PREFIX}-ntldd
          ./.ci/ci-build.sh

      - name: "Upload binaries"
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.msystem }}-packages
          path: C:/_/artifacts/*.pkg.tar.*
          if-no-files-found: ignore

      - name: "Upload dumps"
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.msystem }}-dumps
          path: ${{ runner.temp }}/_dumps/*.dmp
          if-no-files-found: ignore

  deploy:
    name: Upload ${{ matrix.msystem }} packages
    runs-on: ubuntu-20.04
    container: archlinux:base-devel
    environment: upload-packages
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: UCRT64, repo: ucrt },
          { msystem: CLANG64, repo: clang }
        ]
    steps:

      - uses: actions/checkout@v1

      - name: Install required tools
        run: |
          sudo pacman -Syuu --noconfirm
          sudo pacman -Syuu --noconfirm
          sudo pacman -S --noconfirm --needed openssh rsync git

      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.msystem }}-packages
          path: artifacts

      - name: Restore ssh private key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.PRIVATE_KEY_SSH }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_SSH }}

      - name: Download and Update database files
        run: |
          rsync -zarv --include="*/" --include="${{ matrix.repo }}*" --exclude="*" mchinoune@frs.sourceforge.net:/home/frs/project/mingw-updates/${{ matrix.repo }}/ myrepo
          repo-add myrepo/${{ matrix.repo }}.db.tar.gz artifacts/*.pkg.tar.*
          rm myrepo/*.old

      - name: Upload package to SF
        run: |
          rsync -t artifacts/*.pkg.tar.* mchinoune@frs.sourceforge.net:/home/frs/project/mingw-updates/${{ matrix.repo }}
          rsync -t --copy-links myrepo/* mchinoune@frs.sourceforge.net:/home/frs/project/mingw-updates/${{ matrix.repo }}

  check:
    needs: [build]
    runs-on: windows-2022
    env:
      mingw_repo_sf: https://sourceforge.net/projects/mingw-updates/files/ucrt
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: UCRT64-packages
          path: C:/_/artifacts
      - name: Check whether to Run
        id: check-run
        run: |
          python .ci/ci-check.py --whether-to-run
      - uses: msys2/setup-msys2@v2
        if: steps.check-run.outputs.run == 'true'
        with:
          msystem: UCRT64
          install: mingw-w64-ucrt-x86_64-python-pip
          release: false # since we aren't building anything
      - name: Add staging and ucrt repos
        if: steps.check-run.outputs.run == 'true'
        shell: msys2 {0}
        run: |
          sed -i '1s|^|[staging]\nServer = https://repo.msys2.org/staging/\nSigLevel = Never\n|' /etc/pacman.conf
          sed -i '1s|^|[ucrt]\nServer = ${{ env.mingw_repo_sf }}\nSigLevel = Never\n|' /etc/pacman.conf
      - name: Update using staging and ucrt
        if: steps.check-run.outputs.run == 'true'
        run: |
          msys2 -c 'pacman --noconfirm -Suuy'
          msys2 -c 'pacman --noconfirm -Suu'
      - name: Run Checks
        if: steps.check-run.outputs.run == 'true'
        shell: msys2 {0}
        run: |
          python .ci/ci-check.py

  package-grokker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/download-artifact@v3
        id: artifacts
        continue-on-error: true
        with:
          name: UCRT64-packages
          path: artifacts
      - name: Grok packages
        uses: jeremyd2019/package-grokker/grok-artifacts@main
        if: steps.artifacts.outcome == 'success'
        continue-on-error: true
        with:
          repo: ucrt64
          path: artifacts
